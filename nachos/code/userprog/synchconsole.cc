#ifdef CHANGED
#include "copyright.h"
#include "system.h"
#include "synchconsole.h"
static Semaphore * readAvail;
static Semaphore * writeDone;
static Semaphore * writeMutex;
static Semaphore * readMutex;
static void ReadAvailHandler(void * arg) { (void) arg; readAvail->V(); }
static void WriteDoneHandler(void * arg) { (void) arg; writeDone->V(); }



SynchConsole::SynchConsole(const char * in, const char * out)
{
  readAvail = new Semaphore("read avail", 0);
  writeDone = new Semaphore("write done", 0);
  writeMutex = new Semaphore("writeMutex", 1);
  readMutex  = new Semaphore("readMutex", 1);
  this->putStringMutex = new Semaphore("putStringMutex", 1);
  this->getStringMutex = new Semaphore("getStringMutex", 1);
  console = new Console (in, out, ReadAvailHandler, WriteDoneHandler, 0);
}

SynchConsole::~SynchConsole()
{
  delete console;
  delete writeDone;
  delete readAvail;
  delete writeMutex;
  delete readMutex;
  delete putStringMutex;
  delete getStringMutex;
}

void SynchConsole::SynchPutChar(int ch)
{ 	
  writeMutex->P();// section critique d'Ã©criture    
  console->PutChar (ch);	// echo it!
  writeDone->P ();
  writeMutex->V();//fin section critique      
}

int SynchConsole::SynchGetChar()
{
  int ch;
  readMutex->P();// section critique de lecture
  readAvail->P ();      // wait for character to arrive
  ch = console->GetChar ();
  readMutex->V();//fin section critique
  return ch;
}

void SynchConsole::SynchPutString(const char s[])
{
  this->putStringMutex->P();
  for(int j=0; s[j]!='\0';j++) {
    synchconsole->SynchPutChar((char)s[j]);
  }
  this->putStringMutex->V();
}

void SynchConsole::SynchGetString(char *s, int n)
{
  int i;
  this->getStringMutex->P();
  for(i=0;i<n;i++)
    {
      char c= synchconsole->SynchGetChar();

      if(c==EOF || i == MAX_STRING_SIZE-1)

	break;
      s[i] = c;
    }

  
  s[i] ='\0';  
  this->getStringMutex->P();    
}

void SynchConsole::SynchPutInt(int n)
{
  char *t= new char[MAX_STRING_SIZE];
  snprintf(t,MAX_STRING_SIZE,"%d",n);
  synchconsole->SynchPutString(t);
  delete []t;
}

void SynchConsole::SynchGetInt(int *n)
{
  char *t=new char[MAX_STRING_SIZE];
  SynchGetString(t,MAX_STRING_SIZE);
  sscanf(t,"%d",n);
  delete []t;

}
  
  
   
#endif // CHANGED


