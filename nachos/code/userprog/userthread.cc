
#include <thread.h>
#include "system.h"
#include "copyright.h"
#include "addrspace.h"
#include "noff.h"
#include "syscall.h"
#include "new"
using namespace std;
typedef struct data{
  int f;
  int arg;
}data;


static int nbThread = 0;
void do_ThreadExit(){
  if(nbThread >0)
    --nbThread;
  else
    interrupt->Halt();
  currentThread->Finish();
}

extern void StartUserThread(void *schmurtz){
  data *tmp = (data*)schmurtz;
  int i;

    for (i = 0; i < NumTotalRegs; i++)
	machine->WriteRegister (i, 0);
	
    machine->WriteRegister (4, tmp->arg);


    machine->WriteRegister (PCReg, tmp->f);
    machine->WriteRegister (NextPCReg, (tmp->f)+4);

    machine->WriteRegister (StackReg, currentThread->space->AllocateUserStack(nbThread));
    DEBUG ('a', "Initializing stack register to 0x%x\n",currentThread->space->AllocateUserStack(nbThread));
    machine->Run();
    free(schmurtz);

}

int do_ThreadCreate(int f,int arg){
  if (currentThread->space->getStack() == -1) {
  	return -1;
  }
  ++nbThread; 
  Thread* newThread = new Thread("new thread");
  if(newThread == NULL){
    return -1;
  }
  data* schmurtz = new data();
  schmurtz->f = f;
  schmurtz->arg = arg;
  newThread->Start(StartUserThread,schmurtz);
  return 0;
}
