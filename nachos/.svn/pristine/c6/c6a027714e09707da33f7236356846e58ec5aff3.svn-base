// exception.cc 
//      Entry point into the Nachos kernel from user programs.
//      There are two kinds of things that can cause control to
//      transfer back to here from user code:
//
//      syscall -- The user code explicitly requests to call a procedure
//      in the Nachos kernel.  Right now, the only function we support is
//      "Halt".
//
//      exceptions -- The user code does something that the CPU can't handle.
//      For instance, accessing memory that doesn't exist, arithmetic errors,
//      etc.  
//
//      Interrupts (which can also cause control to transfer from user
//      code into the Nachos kernel) are handled elsewhere.
//
// For now, this only handles the Halt() system call.
// Everything else core dumps.
//
// Copyright (c) 1992-1993 The Regents of the University of California.
// All rights reserved.  See copyright.h for copyright notice and limitation 
// of liability and disclaimer of warranty provisions.

#include "copyright.h"
#include "system.h"
#include "syscall.h"
#include "synchconsole.h"
#define MAX_STRING_SIZE 30
//----------------------------------------------------------------------
// UpdatePC : Increments the Program Counter register in order to resume
// the user program immediately after the "syscall" instruction.
//----------------------------------------------------------------------
static void
UpdatePC ()
{
    int pc = machine->ReadRegister (PCReg);
    machine->WriteRegister (PrevPCReg, pc);
    pc = machine->ReadRegister (NextPCReg);
    machine->WriteRegister (PCReg, pc);
    pc += 4;
    machine->WriteRegister (NextPCReg, pc);
}

int  copyStringFromMachine (int from, char *to, unsigned size) {
        
 
  int x;
  int i=0;
  while(to[i]!=EOF && to[i]!='\0' && i<(int)size - 1){
    machine->ReadMem(from+i,1,&x);
    to[i]=(char)x;
    i++;
  }
  to[i] = '\0';
  return i;
}

void Handler(int s) {
  char *buffer = new char[MAX_STRING_SIZE];
  
  int res =0;
  
  do { 
    res=copyStringFromMachine(s,buffer,MAX_STRING_SIZE);
    synchconsole->SynchPutString(buffer);
    s+= res;
  } while (res == (MAX_STRING_SIZE - 1));
	  
	  
  delete [] buffer;
}

int copyStringToMachine(int x, char *to,int size){
  int i=0;
  int j;
  while(to[i]!='\0' && to[i]!=EOF && i<(int)size-1) {
    machine->WriteMem(x+i,1,to[i]);
    i++;
  }
  to[i]='\0';
  return i;
}


//----------------------------------------------------------------------
// ExceptionHandler
//      Entry point into the Nachos kernel.  Called when a user program
//      is executing, and either does a syscall, or generates an addressing
//      or arithmetic exception.
//
//      For system calls, the following is the calling convention:
//
//      system call code -- r2
//              arg1 -- r4
//              arg2 -- r5
//              arg3 -- r6
//              arg4 -- r7
//
//      The result of the system call, if any, must be put back into r2. 
//
// And don't forget to increment the pc before returning. (Or else you'll
// loop making the same system call forever!
//
//      "which" is the kind of exception.  The list of possible exceptions 
//      are in machine.h.
//----------------------------------------------------------------------

void
ExceptionHandler (ExceptionType which)
{
    int type = machine->ReadRegister (2);

    switch (which)
      {
	case SyscallException:
          {
	    switch (type)
	      {
		case SC_Halt:
		  {
		    DEBUG ('s', "Shutdown, initiated by user program.\n");
		    interrupt->Halt ();
		    break;
		  }
		case SC_PutChar:
		  {
		    DEBUG ('s', "PutChar\n");
		    synchconsole->SynchPutChar ((int)machine->ReadRegister (4));
		    break;
		  }
	      case SC_PutString :
		{
		  DEBUG('s', "PutString\n");
		  Handler(machine->ReadRegister(4));
		  break;
		  //DEBUG('s', "PutString\n");
		  //putStringHandler(machine->ReadRegister(4));
		  //break;
		    DEBUG ('s', "PutString test\n");
		    char buff[MAX_STRING_SIZE];
		    bool last_step = false;
		    int written_chars;
		    int begin = machine->ReadRegister (4);
		
		    while(last_step == false)
		    {
			written_chars = copyStringFromMachine(begin, buff, MAX_STRING_SIZE);
			if (written_chars != 32)
			{
				last_step = true;
			}
			else
			{
				begin += MAX_STRING_SIZE -1;
			}
			synchconsole->SynchPutString(buff);
		    }
		    break;
		}
		
	      case SC_Exit :
		{
		  DEBUG('s',"EXIT\n");
		  interrupt->Exit ();
		  break;
		}
		
	      case SC_GetChar  :
		{
		  DEBUG('s', "GetChar\n");
		  machine->WriteRegister(2,synchconsole->SynchGetChar());
		  break;
		}

	      case SC_GetString :
		{
		  DEBUG('s',"GetString");
		  char *buff= new char[MAX_STRING_SIZE];
		  int to = machine->ReadRegister(4);
		  synchconsole->SynchGetString(buff,MAX_STRING_SIZE);

		  copyStringToMachine(to,buff,MAX_STRING_SIZE);
		  delete [] buff;

		  break;
		}
		
		default:
		  {
		    printf("Unimplemented system call %d\n", type);
		    ASSERT(FALSE);
		  }
		
	      }

	    // Do not forget to increment the pc before returning!
	    UpdatePC ();
	    break;
	  }

	case PageFaultException:
	  if (!type) {
	    printf("NULL dereference at PC %x!\n", machine->registers[PCReg]);
	    ASSERT (FALSE);
	  } else {
	    printf ("Page Fault at address %x at PC %x\n", type, machine->registers[PCReg]);
	    ASSERT (FALSE);	// For now
	  }

	default:
	  printf ("Unexpected user mode exception %d %d at PC %x\n", which, type, machine->registers[PCReg]);
	  ASSERT (FALSE);
      }
}
